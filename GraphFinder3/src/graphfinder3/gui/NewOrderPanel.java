/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package graphfinder3.gui;

import graphfinder3.data.*;
import graphfinder3.network.Command;
import graphfinder3.network.Message;
import java.util.ArrayList;

/**
 *
 * @author damian
 */
public class NewOrderPanel extends javax.swing.JPanel {

	// polaczenie
	private CommunicationHandler communicationHandler = null;
	// komponenty
	private final BuildRuleTableModel buildRuleTableModel;
	private final TaskTableModel taskTableModel;

	/**
	 * Creates new form NewOrderPanel
	 */
	public NewOrderPanel() {
		initComponents();

		// ustawienie modeli, rendererow i edytorow
		buildRuleTableModel = new BuildRuleTableModel();
		buildRuleTable.setModel(buildRuleTableModel);
		ComboBoxCellEditor buildRuleCellEditor = new ComboBoxCellEditor(BuildRule.values());
		buildRuleTable.getColumnModel().getColumn(0).setCellEditor(buildRuleCellEditor);
//		buildRuleTable.getColumnModel().getColumn(0).setCellRenderer(buildRuleCellEditor);

		taskTableModel = new TaskTableModel();
		taskTable.setModel(taskTableModel);
		ComboBoxCellEditor teskCellEditor = new ComboBoxCellEditor(Task.values());
		taskTable.getColumnModel().getColumn(0).setCellEditor(teskCellEditor);
//		taskTable.getColumnModel().getColumn(0).setCellRenderer(teskCellEditor);

		// wartosci domyslne
		taskTableModel.addTask(Task.BEST_RADIUS);
		taskTableModel.addTask(Task.DIAMETER_FROM_ALL);
		taskTableModel.addTask(Task.BEST_AVERAGE);
		taskTableModel.addTask(Task.AVERAGE_FROM_ALL);
		
		updateOrderName();
	}

	/**
	 * Ustawia obiekt polaczenia
	 *
	 * @param communicationHandler
	 */
	public void setCommunicationHandler(CommunicationHandler communicationHandler) {
		this.communicationHandler = communicationHandler;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        orderNameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        graphDegreeSpinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        prioritySpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        divLevelSpinner = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        buildRuleTable = new javax.swing.JTable();
        createButton = new javax.swing.JButton();
        defaultButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        taskTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        nodeNumberSpinner = new javax.swing.JSpinner();
        autoCheckBox = new javax.swing.JCheckBox();

        jLabel1.setText("Order name:");

        orderNameTextField.setText("Graph");

        jLabel2.setText("Grapg degree:");

        graphDegreeSpinner.setModel(new javax.swing.SpinnerNumberModel(3, 3, 8, 1));
        graphDegreeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                graphDegreeSpinnerStateChanged(evt);
            }
        });

        jLabel3.setText("Priority:");

        prioritySpinner.setModel(new javax.swing.SpinnerNumberModel(5, 1, 20, 1));

        jLabel4.setText("Div level:");

        divLevelSpinner.setModel(new javax.swing.SpinnerNumberModel(3, 0, 100, 1));

        buildRuleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        buildRuleTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                buildRuleTablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(buildRuleTable);

        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        defaultButton.setText("Default");
        defaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultButtonActionPerformed(evt);
            }
        });

        taskTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        taskTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                taskTablePropertyChange(evt);
            }
        });
        jScrollPane2.setViewportView(taskTable);

        jLabel5.setText("Node number:");

        nodeNumberSpinner.setModel(new javax.swing.SpinnerNumberModel(16, 4, 20000, 1));
        nodeNumberSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                nodeNumberSpinnerStateChanged(evt);
            }
        });

        autoCheckBox.setSelected(true);
        autoCheckBox.setText("auto");
        autoCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(defaultButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(createButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(prioritySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(divLevelSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(graphDegreeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nodeNumberSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 50, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(orderNameTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(autoCheckBox)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {createButton, defaultButton});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel2, jLabel3, jLabel4, jLabel5});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {divLevelSpinner, graphDegreeSpinner, nodeNumberSpinner, prioritySpinner});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(orderNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(autoCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(graphDegreeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(nodeNumberSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(prioritySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(divLevelSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createButton)
                    .addComponent(defaultButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void defaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultButtonActionPerformed
		// przywraca wartosci domyslne
		buildRuleTableModel.clear();
		taskTableModel.clear();
		orderNameTextField.setText("Graph");
		graphDegreeSpinner.setValue(3);
		nodeNumberSpinner.setValue(16);
		prioritySpinner.setValue(5);
		divLevelSpinner.setValue(3);
		autoCheckBox.setSelected(true);
		updateOrderName();
	}//GEN-LAST:event_defaultButtonActionPerformed

	private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
		if (communicationHandler != null) {
			// tworzenie problemu
			Problem problem = new Problem(buildRuleTableModel.getBuildRules(), taskTableModel.getTasks(), new Graph((Integer) nodeNumberSpinner.getValue(), (Integer) graphDegreeSpinner.getValue()), new ArrayList<Integer>());
			// tworzenie problemu
			Order order = new Order(orderNameTextField.getText(), problem, (Integer) prioritySpinner.getValue(), (Integer) divLevelSpinner.getValue());
			// wysylanie
			communicationHandler.sendToServer(new Message(Command.NEW_ORDER, order));
		}
	}//GEN-LAST:event_createButtonActionPerformed

	private void buildRuleTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_buildRuleTablePropertyChange
		updateOrderName();
	}//GEN-LAST:event_buildRuleTablePropertyChange

	private void taskTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_taskTablePropertyChange
		updateOrderName();
	}//GEN-LAST:event_taskTablePropertyChange

	private void autoCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoCheckBoxActionPerformed
		updateOrderName();
	}//GEN-LAST:event_autoCheckBoxActionPerformed

	private void graphDegreeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_graphDegreeSpinnerStateChanged
		updateOrderName();
	}//GEN-LAST:event_graphDegreeSpinnerStateChanged

	private void nodeNumberSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_nodeNumberSpinnerStateChanged
		updateOrderName();
	}//GEN-LAST:event_nodeNumberSpinnerStateChanged

	/**
	 * Automatycznie aktualizuje propozycje nazwy
	 */
	private void updateOrderName() {
		if (autoCheckBox.isSelected()) {
			StringBuilder sb = new StringBuilder();
			sb.append("D").append(graphDegreeSpinner.getValue()).append("N").append(nodeNumberSpinner.getValue());
			for (BuildRule buildRule : buildRuleTableModel.getBuildRules()) {
				if (!buildRule.equals(BuildRule.NONE)) {
					sb.append("-").append(buildRule);
				}
			}
			orderNameTextField.setText(sb.toString());
		}
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autoCheckBox;
    private javax.swing.JTable buildRuleTable;
    private javax.swing.JButton createButton;
    private javax.swing.JButton defaultButton;
    private javax.swing.JSpinner divLevelSpinner;
    private javax.swing.JSpinner graphDegreeSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner nodeNumberSpinner;
    private javax.swing.JTextField orderNameTextField;
    private javax.swing.JSpinner prioritySpinner;
    private javax.swing.JTable taskTable;
    // End of variables declaration//GEN-END:variables
}
