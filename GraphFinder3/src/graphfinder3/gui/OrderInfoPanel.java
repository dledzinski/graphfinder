/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package graphfinder3.gui;

import graphfinder3.data.Result;
import graphfinder3.network.*;
import graphfinder3.util.DiscSaver;
import graphfinder3.util.Formater;
import java.awt.EventQueue;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Set;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.apache.log4j.Logger;

/**
 *
 * @author damian
 */
public class OrderInfoPanel extends javax.swing.JPanel implements CommunicationListener {

	// logger
	private static final Logger logger = Logger.getLogger(GuiMain.class);
	// uchwyt komunikacyjny
	private CommunicationHandler communicationHandler;
	// model
	private final OrderInfoTableModel orderInfoTableModel = new OrderInfoTableModel();
	private final ResultSetTableModel resultSetTableModel = new ResultSetTableModel();
	// chwilowy wynik
	private OrderDetails currentOrderDetails = null;

	/**
	 * Creates new form OrderInfoPanel
	 */
	public OrderInfoPanel() {
		initComponents();
		// komponenty
		orderInfoTable.setModel(orderInfoTableModel);
		resultSetTable.setModel(resultSetTableModel);

		// zmiana zaznaczenia
		orderInfoTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

			@Override
			public void valueChanged(ListSelectionEvent e) {
				if (orderInfoTable.getSelectedRow() >= 0) {
					// ustalanie co
					int index = orderInfoTable.convertRowIndexToModel(orderInfoTable.getSelectedRow());
					String orderName = orderInfoTableModel.get(index).getOrderName();
					// wysylanie zapytania
					if (communicationHandler != null) {
						communicationHandler.sendToServer(new Message(Command.ORDER_GET_DETAILS, orderName));
					}
				}
				guiInteraction();
			}
		});

		resultSetTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

			@Override
			public void valueChanged(ListSelectionEvent e) {
				guiInteraction();
			}
		});

		guiInteraction();
	}

	/**
	 * Ustawia obiekt polaczenia
	 *
	 * @param communicationHandler
	 */
	public void setCommunicationHandler(CommunicationHandler communicationHandler) {
		this.communicationHandler = communicationHandler;
		// rejestacja
		communicationHandler.addCommunicationListener(this);
		// rejestracja na zdarzenia
		communicationHandler.sendToServer(new Message(Command.ORDER_INFO_REGISTER, null));
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        refreshButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        changePriorityButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderInfoTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultSetTable = new javax.swing.JTable();
        showGraphButton = new javax.swing.JButton();
        saveGraphButton = new javax.swing.JButton();
        saveResultsButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        orderNameTextField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        orderDetailsTextArea = new javax.swing.JTextArea();
        detailRefreshButton = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Orders"));

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        changePriorityButton.setText("Change priority");
        changePriorityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePriorityButtonActionPerformed(evt);
            }
        });

        orderInfoTable.setAutoCreateRowSorter(true);
        orderInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        orderInfoTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(orderInfoTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(changePriorityButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(refreshButton)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {changePriorityButton, deleteButton, refreshButton});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshButton)
                    .addComponent(deleteButton)
                    .addComponent(changePriorityButton))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Order detail"));

        resultSetTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        resultSetTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(resultSetTable);

        showGraphButton.setText("Show graph");
        showGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showGraphButtonActionPerformed(evt);
            }
        });

        saveGraphButton.setText("Save graph");
        saveGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveGraphButtonActionPerformed(evt);
            }
        });

        saveResultsButton.setText("Save results");
        saveResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveResultsButtonActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jLabel1.setText("Name:");

        orderNameTextField.setEditable(false);

        orderDetailsTextArea.setColumns(20);
        orderDetailsTextArea.setEditable(false);
        orderDetailsTextArea.setRows(5);
        jScrollPane3.setViewportView(orderDetailsTextArea);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orderNameTextField))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(orderNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
        );

        detailRefreshButton.setText("Refresh");
        detailRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailRefreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(saveResultsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(detailRefreshButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveGraphButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(showGraphButton)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {detailRefreshButton, saveGraphButton, saveResultsButton, showGraphButton});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showGraphButton)
                    .addComponent(saveGraphButton)
                    .addComponent(saveResultsButton)
                    .addComponent(detailRefreshButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

	private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
		if (communicationHandler != null) {
			communicationHandler.sendToServer(new Message(Command.ORDER_INFO_REGISTER, null));
		}
	}//GEN-LAST:event_refreshButtonActionPerformed

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
		if (orderInfoTable.getSelectedRow() >= 0) {
			// ustalanie co
			int index = orderInfoTable.convertRowIndexToModel(orderInfoTable.getSelectedRow());
			String orderName = orderInfoTableModel.get(index).getOrderName();
			// pytanie czy napewno
			if (JOptionPane.showConfirmDialog(this, "Delete: " + orderName + "?", "Delete", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
				if (communicationHandler != null) {
					communicationHandler.sendToServer(new Message(Command.DELETE_ORDER, orderName));
				}
			}
		}
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void changePriorityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePriorityButtonActionPerformed
		if (orderInfoTable.getSelectedRow() >= 0) {
			// ustalanie co
			int index = orderInfoTable.convertRowIndexToModel(orderInfoTable.getSelectedRow());
			String orderName = orderInfoTableModel.get(index).getOrderName();
			PriorityDialog priorityDialog = new PriorityDialog(null, true, orderInfoTableModel.get(index).getPriority());
			priorityDialog.setVisible(true);
			if (priorityDialog.getPriority() >= 0) {
				if (communicationHandler != null) {
					communicationHandler.sendToServer(new Message(Command.ORDER_SET_PRIORITY, new OrderPriority(orderName, priorityDialog.getPriority())));
				}
			}
		}
	}//GEN-LAST:event_changePriorityButtonActionPerformed

	private void saveGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveGraphButtonActionPerformed
		if (resultSetTable.getSelectedRow() >= 0) {
			// zapis obrazka
			try {
				Result result = resultSetTableModel.get(resultSetTable.getSelectedRow());
				String fileName = currentOrderDetails.getOrderInfo().getOrderName();
				fileName += "_" + result.getTask() + "_" + Formater.fileDateFormat(System.currentTimeMillis()) + ".png";
				(new GraphBufferedImage(result.getGraph(), false)).save(fileName);
			} catch (IOException e) {
				logger.error("Blad zapisu do pliku", e);
				JOptionPane.showMessageDialog(this, "File writing error: " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
			}
		}
	}//GEN-LAST:event_saveGraphButtonActionPerformed

	private void showGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showGraphButtonActionPerformed
		if (resultSetTable.getSelectedRow() >= 0) {
			Result result = resultSetTableModel.get(resultSetTable.getSelectedRow());
			JDialog dialog = new JDialog();
			dialog.setModal(true);
			dialog.add(new JLabel((new GraphBufferedImage(result.getGraph(), false)).getImageIcon()));
			dialog.pack();
			dialog.setVisible(true);
		}
	}//GEN-LAST:event_showGraphButtonActionPerformed

	private void saveResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveResultsButtonActionPerformed
		if (currentOrderDetails != null) {
			try {
				DiscSaver.getInstance().save(currentOrderDetails);
			} catch (IOException e) {
				logger.error("Blad zapisu do pliku", e);
				JOptionPane.showMessageDialog(this, "File writing error: " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
			}
		}
	}//GEN-LAST:event_saveResultsButtonActionPerformed

	private void detailRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailRefreshButtonActionPerformed
		if (currentOrderDetails != null) {
			if (communicationHandler != null) {
				communicationHandler.sendToServer(new Message(Command.ORDER_GET_DETAILS, currentOrderDetails.getOrderInfo().getOrderName()));
			}
		}
	}//GEN-LAST:event_detailRefreshButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton changePriorityButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton detailRefreshButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea orderDetailsTextArea;
    private javax.swing.JTable orderInfoTable;
    private javax.swing.JTextField orderNameTextField;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTable resultSetTable;
    private javax.swing.JButton saveGraphButton;
    private javax.swing.JButton saveResultsButton;
    private javax.swing.JButton showGraphButton;
    // End of variables declaration//GEN-END:variables

	/**
	 * Metoda zapewniajaca interakcje GUI
	 */
	private void guiInteraction() {
		if (orderInfoTable.getSelectedRowCount() == 1) {
			changePriorityButton.setEnabled(true);
			deleteButton.setEnabled(true);
		} else {
			changePriorityButton.setEnabled(false);
			deleteButton.setEnabled(false);
		}
		if (currentOrderDetails != null) {
			saveResultsButton.setEnabled(true);
			detailRefreshButton.setEnabled(true);
		} else {
			saveResultsButton.setEnabled(false);
			detailRefreshButton.setEnabled(false);
		}
		if (resultSetTable.getSelectedRowCount() == 1) {
			saveGraphButton.setEnabled(true);
			showGraphButton.setEnabled(true);
		} else {
			saveGraphButton.setEnabled(false);
			showGraphButton.setEnabled(false);
		}
	}

	@Override
	public void orderDetails(final OrderDetails orderDetails) {
		EventQueue.invokeLater(new Runnable() {

			@Override
			public void run() {
				// zapis
				currentOrderDetails = orderDetails;
				// podstawowe parametry
				orderNameTextField.setText(orderDetails.getOrderInfo().getOrderName());
				resultSetTableModel.setData(orderDetails.getCurrentResultSet());

				// szczeguly
				StringBuilder sb = new StringBuilder();
				sb.append(orderDetails.getOrderInfo().isFinished() ? "Finished" : "UNFINISHED!").append("\n");
				double progress = (1.0 * orderDetails.getOrderInfo().getResultCounter()) / orderDetails.getOrderInfo().getTotalResultNumber();
				sb.append("Progress: ").append(Formater.percentFormat(progress)).append("\n");
				sb.append("Processed graphs: ").append(orderDetails.getOrderInfo().getGraphCounter()).append("\n");
				sb.append("Processing time: ").append(Formater.processingTimeFormat(orderDetails.getOrderInfo().getProcessingTime())).append("\n");
				sb.append("Since: ").append(Formater.dateFormat(orderDetails.getOrderInfo().getCreationTime())).append("\n");
				sb.append("Build rules: ").append(orderDetails.getProblem().getBuildRules());

				// zapis
				orderDetailsTextArea.setText(sb.toString());
				guiInteraction();
			}
		});
	}

	@Override
	public void orderInfos(final Set<OrderInfo> orderInfos) {
		EventQueue.invokeLater(new Runnable() {

			@Override
			public void run() {
				orderInfoTableModel.setData(orderInfos);
			}
		});
	}

	@Override
	public void clientInfos(Set<ClientInfo> clientInfos) {
	}

	@Override
	public void loginOk(String clientName) {
		// rejestracja na zdarzenia
		communicationHandler.sendToServer(new Message(Command.ORDER_INFO_REGISTER, null));
	}

	@Override
	public void error(String message) {
	}

	@Override
	public void fatalError(String message) {
	}

	@Override
	public void disconnected() {
	}
}
